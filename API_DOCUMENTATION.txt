# Metrics Engine API Documentation
# =================================

## Overview
The Metrics Engine provides a REST API to access computed financial metrics from the dual-database architecture. The API serves metrics computed from source data (ingestor DB) and stored in the target database (metrics DB).

## Base URL
- Local: http://localhost:3000/api
- Production: [Your production URL]/api

## Authentication
Currently no authentication required. For production, consider implementing API key authentication.

## Available Endpoints

### 1. Health Check
**GET** `/api/health`

Returns the health status of the system and database connections.

**Response:**
```json
{
  "status": "healthy",
  "timestamp": "2025-10-25",
  "timezone": "America/Argentina/Buenos_Aires",
  "databases": {
    "source": true,
    "target": true
  },
  "lastMetricTs": "2025-10-24T00:00:00.000Z"
}
```

**Usage:**
```bash
curl http://localhost:3000/api/health
```

### 2. Get Historical Metric Values
**GET** `/api/v1/metrics/{metricId}`

Retrieves historical values for a specific metric with optional filtering.

**Parameters:**
- `metricId` (path): The metric identifier (e.g., "ratio.reserves_to_base")
- `from` (query, optional): Start date in YYYY-MM-DD format
- `to` (query, optional): End date in YYYY-MM-DD format
- `limit` (query, optional): Maximum number of results (1-5000, default: 500)

**Response:**
```json
{
  "metric_id": "ratio.reserves_to_base",
  "points": [
    {
      "ts": "2025-10-22T00:00:00.000Z",
      "value": "0.001015010141094666",
      "metadata": {
        "base": "39970044",
        "reserves": "40570"
      }
    }
  ],
  "count": 1
}
```

**Usage Examples:**
```bash
# Get latest 5 values for reserves-to-base ratio
curl "http://localhost:3000/api/v1/metrics/ratio.reserves_to_base?limit=5"

# Get values for a specific date range
curl "http://localhost:3000/api/v1/metrics/delta.reserves_7d?from=2025-10-01&to=2025-10-31"

# Get all available values (up to limit)
curl "http://localhost:3000/api/v1/metrics/fx.brecha_mep"
```

### 3. Get Latest Values for Multiple Metrics
**GET** `/api/v1/metrics/summary`

Retrieves the most recent values for multiple metrics in a single request.

**Parameters:**
- `ids` (query, required): Comma-separated list of metric IDs

**Response:**
```json
{
  "items": [
    {
      "metric_id": "ratio.reserves_to_base",
      "ts": "2025-10-22T00:00:00.000Z",
      "value": "0.001015010141094666",
      "metadata": {
        "base": "39970044",
        "reserves": "40570"
      }
    }
  ],
  "missing": ["mon.pasivos_rem_ars", "mon.respaldo_real"]
}
```

**Usage Examples:**
```bash
# Get latest values for key metrics
curl "http://localhost:3000/api/v1/metrics/summary?ids=ratio.reserves_to_base,delta.reserves_7d,delta.base_30d"

# Get all available metrics
curl "http://localhost:3000/api/v1/metrics/summary?ids=ratio.reserves_to_base,delta.reserves_7d,delta.base_30d,fx.brecha_mep,delta.reserves_5d,mon.base_ampliada_ars"
```

## Available Metrics

### Core Metrics
- **`ratio.reserves_to_base`**: Reserves to monetary base ratio
- **`delta.reserves_7d`**: 7-day percentage change in reserves
- **`delta.base_30d`**: 30-day percentage change in monetary base
- **`delta.reserves_5d`**: 5-day percentage change in reserves

### FX Metrics
- **`fx.brecha_mep`**: Gap between MEP and official exchange rates

### Monetary Metrics
- **`mon.base_ampliada_ars`**: Extended monetary base in ARS
- **`mon.pasivos_rem_ars`**: Remunerated liabilities in ARS (requires 2025 data)
- **`mon.respaldo_real`**: Real backing ratio (requires pasivos data)

## Error Responses

### 400 Bad Request
```json
{
  "error": "Validation failed",
  "details": [
    {
      "path": "from",
      "message": "From date must be in YYYY-MM-DD format"
    }
  ]
}
```

### 404 Not Found
```json
{
  "error": "Metric ratio.reserves_to_base not found"
}
```

### 500 Internal Server Error
```json
{
  "error": "Internal server error"
}
```

## Interactive Documentation
Visit `/api/docs` for interactive Swagger UI documentation with full schema definitions and examples.

## Data Sources
- **Source DB**: Read-only access to ingestor database (localhost:5433)
- **Target DB**: Read-write access to metrics database (localhost:5434)
- **Timezone**: America/Argentina/Buenos_Aires
- **Update Frequency**: Daily at 08:15 ART (when scheduler enabled)

## Integration Examples

### Python
```python
import requests

# Get latest metrics
response = requests.get("http://localhost:3000/api/v1/metrics/summary", 
                       params={"ids": "ratio.reserves_to_base,delta.reserves_7d"})
data = response.json()

for item in data["items"]:
    print(f"{item['metric_id']}: {item['value']} ({item['ts']})")
```

### JavaScript/Node.js
```javascript
const axios = require('axios');

// Get historical data
const response = await axios.get('http://localhost:3000/api/v1/metrics/ratio.reserves_to_base', {
  params: { limit: 10 }
});

console.log(response.data.points);
```

### cURL Examples
```bash
# Health check
curl http://localhost:3000/api/health

# Get specific metric
curl "http://localhost:3000/api/v1/metrics/ratio.reserves_to_base?limit=5"

# Get multiple metrics
curl "http://localhost:3000/api/v1/metrics/summary?ids=ratio.reserves_to_base,delta.reserves_7d"

# Interactive documentation
open http://localhost:3000/api/docs
```

## Quick Reference - Available Endpoints

| Endpoint | Method | Description | Example |
|----------|--------|-------------|---------|
| `/api/health` | GET | System health check | `curl http://localhost:3000/api/health` |
| `/api/v1/metrics/{metricId}` | GET | Historical metric data | `curl http://localhost:3000/api/v1/metrics/ratio.reserves_to_base` |
| `/api/v1/metrics/summary` | GET | Latest values for multiple metrics | `curl "http://localhost:3000/api/v1/metrics/summary?ids=ratio.reserves_to_base,delta.reserves_7d"` |
| `/api/docs/` | GET | Interactive API documentation | Open http://localhost:3000/api/docs/ in browser |

## Available Metrics for Frontend Integration

### Core Financial Metrics
- **`ratio.reserves_to_base`**: Reserves to monetary base ratio (0.001 = 0.1% backing)
- **`delta.reserves_7d`**: 7-day percentage change in reserves (-3.99% = reserves decreased)
- **`delta.base_30d`**: 30-day percentage change in monetary base (-3.40% = base decreased)
- **`delta.reserves_5d`**: 5-day percentage change in reserves

### FX Metrics
- **`fx.brecha_mep`**: Gap between MEP and official exchange rates (0% = no gap)

### Monetary Metrics
- **`mon.base_ampliada_ars`**: Extended monetary base in ARS
- **`mon.pasivos_rem_ars`**: Remunerated liabilities in ARS (requires 2025 data)
- **`mon.respaldo_real`**: Real backing ratio (requires pasivos data)

## Frontend Integration Examples

### Get All Latest Metrics
```bash
curl "http://localhost:3000/api/v1/metrics/summary?ids=ratio.reserves_to_base,delta.reserves_7d,delta.base_30d,fx.brecha_mep,delta.reserves_5d,mon.base_ampliada_ars"
```

### Get Historical Data for Specific Metric
```bash
# Get last 10 values
curl "http://localhost:3000/api/v1/metrics/ratio.reserves_to_base?limit=10"

# Get values for specific date range
curl "http://localhost:3000/api/v1/metrics/delta.reserves_7d?from=2025-10-01&to=2025-10-31"
```

### Health Check for Monitoring
```bash
curl http://localhost:3000/api/health
```

## Notes
- All timestamps are in ISO 8601 format (UTC)
- Values are returned as strings to preserve precision
- Metadata includes calculation inputs and intermediate values
- Missing metrics indicate insufficient source data
- The system uses idempotent upserts for data consistency
