version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: metrics-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: metrics_engine
      POSTGRES_USER: metrics_user
      POSTGRES_PASSWORD: metrics_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    ports:
      - '5434:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - metrics-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U metrics_user -d metrics_engine']
      interval: 10s
      timeout: 5s
      retries: 5

  # Metrics Engine Application
  metrics-engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: metrics-engine-app
    restart: unless-stopped
    env_file:
      - docker.env
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - metrics-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Migration Service (runs after postgres is ready)
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: metrics-migrate
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://metrics_user:metrics_password@postgres:5432/metrics_engine
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - metrics-network
    command: ['npm', 'run', 'migrate']
    restart: 'no'

volumes:
  postgres_data:
    driver: local

networks:
  metrics-network:
    driver: bridge
